Функция Исполнить(ТекстЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	Запрос = Запрос(ТекстЗапроса, ПараметрыЗапроса);
	Возврат Запрос.Выполнить();
КонецФункции 

Функция ПервыйРезультат(ТекстЗапроса, ПараметрыЗапроса = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Результат = Исполнить(ТекстЗапроса, ПараметрыЗапроса);
	Если Результат.Колонки.Количество() < 1 Тогда
		А1Э_Служебный.СлужебноеИсключение("В результате запроса должен быть хотя бы одно поле!");
	КонецЕсли;
	ИмяПоля = Результат.Колонки[0].Имя;
	Если Результат.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка[ИмяПоля];
КонецФункции

Функция Запрос(ДанныеДляЗапроса, Параметры = Неопределено) Экспорт
	Если А1Э_Классы.Класс(ДанныеДляЗапроса) = А1Э_Классы.ДанныеЗапроса() Тогда
		Запрос = Новый Запрос(ДанныеДляЗапроса.Текст);
		ПодставитьПараметрыВЗапрос(Запрос, ДанныеДляЗапроса.Параметры);
	ИначеЕсли ТипЗнч(ДанныеДляЗапроса) = Тип("Запрос") Тогда
		Запрос = ДанныеДляЗапроса;
	ИначеЕсли ТипЗнч(ДанныеДляЗапроса) = Тип("Строка") Тогда
		Запрос = Новый Запрос(ДанныеДляЗапроса);
		ПодставитьПараметрыВЗапрос(Запрос, Параметры);
	Иначе
		А1Э_Служебный.СлужебноеИсключение("Запрос может быть сформировать только из запроса или объекта класса ДанныеЗапроса!");
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

Функция ПодставитьСтроку(ТекстЗапроса, СтрокаПоиска, СтрокаЗамены) Экспорт
	СтрокаДляЗамены = """" + СтрокаЗамены + """";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаПоиска, СтрокаДляЗамены);
КонецФункции

#Область СборкаЗапросов

#Область Декларации

Функция НоваяСборкаЗапроса()
	НоваяСборкаЗапроса = Новый Массив;
	НоваяСборкаЗапроса.Добавить(НовыйСтруктураЗапроса("ВЫБРАТЬ"));
	Возврат НоваяСборкаЗапроса;
КонецФункции 

Функция НовыйСтруктураЗапроса(Ключ = "ВЫБРАТЬ", ИмяВременнойТаблицы = "") Экспорт 
	Если ЗначенияКлючейЗапроса().Найти(Ключ) = Неопределено Тогда
		А1Э_Служебный.СлужебноеИсключение("Неверный ключ запроса!");
	КонецЕсли;
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("Класс", А1Э_Классы.СтруктураЗапроса());
	СтруктураЗапроса.Вставить("Ключ", Ключ);
	СтруктураЗапроса.Вставить("Поля", Новый Массив);
	СтруктураЗапроса.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	СтруктураЗапроса.Вставить("ИсточникиДанных", Новый Массив);
	
	Возврат СтруктураЗапроса;
КонецФункции

Функция НовыйПолеЗапроса(Имя, Текст = "", Группировка = "") Экспорт
	Возврат Новый Структура("Класс,Имя,Текст,Группировка", А1Э_Классы.ПолеЗапроса(), Имя, Текст, Группировка);
КонецФункции

Функция НовыйИсточникДанныхЗапроса(Имя, ИсточникДанных, Соединения = Неопределено) Экспорт
	ИсточникДанныхЗапроса =  Новый Структура("Класс", А1Э_Классы.ИсточникДанныхЗапроса());
	ИсточникДанныхЗапроса.Вставить("Имя", Имя);
	ИсточникДанныхЗапроса.Вставить("ИсточникДанных", ИсточникДанных);
	ИсточникДанныхЗапроса.Вставить("Соединения", А1Э_Массивы.Массив(Соединения));
	
	Возврат ИсточникДанныхЗапроса;
КонецФункции

Функция НовыйСоединениеЗапроса(ИсточникДанных, Тип = "ЛЕВОЕ", Условие = "ИСТИНА") Экспорт
	Если ЗначенияТиповСоединений().Найти(Тип) = Неопределено Тогда
		А1Э_Служебный.СлужебноеИсключение("Неверный тип соединения запроса!");
	КонецЕсли;
	Возврат Новый Структура("Класс,Тип,ИсточникДанных,Условие",А1Э_Классы.СоединениеЗапроса(), Тип, ИсточникДанных, Условие);		
КонецФункции

Функция ЗначенияКлючейЗапроса()
	Возврат А1Э_Массивы.Создать("ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "УНИЧТОЖИТЬ");
КонецФункции

Функция ЗначенияТиповСоединений()
	Возврат	А1Э_Массивы.Создать("ЛЕВОЕ", "ПРАВОЕ", "ВНУТРЕННЕЕ", "ПОЛНОЕ");
КонецФункции

#КонецОбласти 

#Область Компоновка 

Функция ДобавитьПоле(СтруктураЗапроса, Имя, Текст = "", Группировка = "") Экспорт
	ДобавитьПоля(СтруктураЗапроса, НовыйПолеЗапроса(Имя, Текст, Группировка));	
КонецФункции

Функция ДобавитьПоля(СтруктураЗапроса, Поля) Экспорт
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля,",");
	ИначеЕсли ТипЗнч(Поля) = Тип("Массив") Тогда
		МассивПолей = Поля;
	ИначеЕсли А1Э_Структуры.Класс(Поля) = А1Э_Классы.ПолеЗапроса() Тогда
		МассивПолей = А1Э_Массивы.Создать(Поля);
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Поля", "А1Э_Запросы.ДобавитьПоля()", Поля, "Строка, Массив");
	КонецЕсли;
	
	ИмяИсточникаДанных = А1Э_Структуры.ЗначениеСвойства(А1Э_Массивы.Получить(СтруктураЗапроса.ИсточникиДанных, 0), "Имя");
	Для Каждого Поле Из МассивПолей Цикл
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Если ИмяИсточникаДанных = Неопределено Тогда
				А1Э_Служебный.СлужебноеИсключение("Для добавления полей по умолчанию в структуре запроса должен быть определен источник данных!");
			КонецЕсли;
			СтруктураЗапроса.Поля.Добавить(НовыйПолеЗапроса(Поле, ИмяИсточникаДанных + "." + Поле));
		ИначеЕсли А1Э_Структуры.Класс(Поле) = А1Э_Классы.ПолеЗапроса() Тогда
			Если Поле.Текст = "" Тогда
				Если ИмяИсточникаДанных = Неопределено Тогда
					А1Э_Служебный.СлужебноеИсключение("Для добавления полей по умолчанию в структуре запроса должен быть определен источник данных!");
				КонецЕсли;
				Поле.Текст = ИмяИсточникаДанных + "." + Поле.Имя;
			КонецЕсли;
			СтруктураЗапроса.Поля.Добавить(Поле);
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Неверный тип в массиве!");
		КонецЕсли;
	КонецЦикла
КонецФункции

Функция ДобавитьИсточникДанных(СтруктураЗапроса, ИсточникДанных, Имя = "") Экспорт  
	Если А1Э_Классы.Класс(ИсточникДанных) = А1Э_Классы.ИсточникДанныхЗапроса() Тогда
		СтруктураЗапроса.ИсточникиДанных.Добавить(ИсточникДанных);
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
		Если Имя = "" Тогда
			ВызватьИсключение "При добавлении источника данных обязательно указание имени!";
		КонецЕсли;
		СтруктураЗапроса.ИсточникиДанных.Добавить(НовыйИсточникДанныхЗапроса(Имя, ИсточникДанных));
	КонецЕсли;
КонецФункции

Функция ДобавитьСоединение(ИсточникДанных, Соединение) Экспорт
	ИсточникДанных.Соединения.Добавить(Соединение);
КонецФункции

#КонецОбласти

#Область Служебно

Функция ОбрезатьЗапятую(МассивСтрок)
	Индекс = МассивСтрок.Количество() - 1;
	Если Индекс < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивСтрок[Индекс] = А1Э_Строки.Перед(МассивСтрок[Индекс], ",");
КонецФункции

#КонецОбласти

Функция ТекстЗапросаИзСтруктуры(СтруктураЗапроса) Экспорт
	Если А1Э_Структуры.Класс(СтруктураЗапроса) <> А1Э_Классы.СтруктураЗапроса() Тогда
		А1Э_Служебный.ИсключениеНеверныйКласс("СтруктураЗапроса", "А1Э_Запросы.ТекстЗапросаИзСтруктуры()", СтруктураЗапроса, А1Э_Классы.СтруктураЗапроса());
	КонецЕсли;
	
	Если СтруктураЗапроса.Ключ = "УНИЧТОЖИТЬ" Тогда
		Возврат ТекстЗапросаУничтожения(СтруктураЗапроса);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	НужноГруппировать = Ложь;
	МассивГруппировок = Новый Массив; 
	
	МассивСтрок.Добавить(СтруктураЗапроса.Ключ);
	
	Для Каждого Поле Из СтруктураЗапроса.Поля Цикл
		Если Поле.Группировка = "" Или Поле.Группировка = "ВТексте" Тогда
			ТекстПоля = Поле.Текст;
		Иначе
			ТекстПоля = Поле.Группировка + "(" + Поле.Текст + ")";
		КонецЕсли;
		МассивСтрок.Добавить(ТекстПоля + " КАК " + Поле.Имя + ",");
	КонецЦикла;
	ОбрезатьЗапятую(МассивСтрок);
	
	Если СтруктураЗапроса.ИмяВременнойТаблицы <> "" Тогда  
		МассивСтрок.Добавить("ПОМЕСТИТЬ " + СтруктураЗапроса.ИмяВременнойТаблицы);
	КонецЕсли;
	
	МассивСтрок.Добавить("ИЗ");
	//СтруктураЗапроса.Вставить("ИспользованныеИсточники", Новый Массив);
	//ТУДУ - сделать нормальную компоновку плохо соединенных запросов!.
	А1Э_Массивы.Добавить(МассивСтрок, МассивСтрокТекстаИсточниковДанных(СтруктураЗапроса, СтруктураЗапроса.ИсточникиДанных[0]));
	
	НадоГруппировать = Ложь;
	Для Каждого Поле Из СтруктураЗапроса.Поля Цикл
		Если Поле.Группировка <> "" Тогда
			НадоГруппировать = Истина;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Если НадоГруппировать Тогда
		МассивСтрок.Добавить("СГРУППИРОВАТЬ ПО");
		Для Каждого Поле Из СтруктураЗапроса.Поля Цикл
			Если Поле.Группировка = "" Тогда
				МассивСтрок.Добавить(Поле.Текст + ",");
			КонецЕсли;
		КонецЦикла;
		ОбрезатьЗапятую(МассивСтрок);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция МассивСтрокТекстаИсточниковДанных(СтруктураЗапроса, ИсточникДанных)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ИсточникДанных.ИсточникДанных + " КАК " + ИсточникДанных.Имя);
	Для Каждого Соединение Из ИсточникДанных.Соединения Цикл
		МассивСтрок.Добавить(Соединение.Тип + " СОЕДИНЕНИЕ");
		А1Э_Массивы.Добавить(МассивСтрок, МассивСтрокТекстаИсточниковДанных(СтруктураЗапроса, 
		А1Э_ТаблицыЗначений.НайтиСтроки(СтруктураЗапроса.ИсточникиДанных, Новый Структура("Имя", Соединение.ИсточникДанных))[0]));
		МассивСтрок.Добавить("ПО");
		МассивСтрок.Добавить(Соединение.Условие);
	КонецЦикла;
	Возврат МассивСтрок;	
КонецФункции

Функция ТекстЗапросаУничтожения(СтруктураЗапроса)
	Возврат "УНИЧТОЖИТЬ " + СтруктураЗапроса.ИмяВременнойТаблицы;
КонецФункции

#КонецОбласти

#Область СегментыЗапросов

Функция УникальноеЗначение(Значение) Экспорт
	Текст = 
	"ВЫБОР
	|	КОГДА МАКСИМУМ(ЕСТЬNULL(&Значение, НЕОПРЕДЕЛЕНО)) = МИНИМУМ(ЕСТЬNULL(&Значение, НЕОПРЕДЕЛЕНО))
	|		ТОГДА МАКСИМУМ(ЕСТЬNULL(&Значение, НЕОПРЕДЕЛЕНО))
	|	ИНАЧЕ ""%НЕУНИКАЛЬНОЕЗНАЧЕНИЕ%""
	|КОНЕЦ";	
	Текст = СтрЗаменить(Текст, "&Значение", Значение);
	Возврат Текст;
КонецФункции 

Функция ИмяТаблицы(Значение) Экспорт
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();	
КонецФункции

#КонецОбласти

#Область Трансформации

Функция ЖСОН(Запрос, ЗаписьЖСОН = Неопределено) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		Запрос = Новый Запрос;		
	#КонецЕсли 
	Таблица = Запрос.Выполнить().Выбрать();
	МассивСтруктур = А1Э_ТаблицыЗначений.ВМассивСтруктур(Таблица);
	Возврат А1Э_Сериализация.ЖСОН(МассивСтруктур, ЗаписьЖСОН);
КонецФункции 

Функция ИерархическийМассивСтруктур(ДанныеДляЗапроса, КолонкиИерархии = Неопределено) Экспорт 
	Значение = Новый Массив;
	Запрос = Запрос(ДанныеДляЗапроса);
	
	#Если Сервер И НЕ Сервер Тогда
		Запрос = Новый Запрос;		
	#КонецЕсли
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Колонки.Найти("ПодчиненныеЭлементы") <> Неопределено Тогда
		А1Э_Служебный.СлужебноеИсключение("Создание иерархического массивы структур невозможно для запроса с колонкой <ПодчиненныеЭлементы>!");
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КолонкиИерархии", А1Э_Массивы.Массив(КолонкиИерархии));
	ДополнительныеПараметры.Вставить("КолонкиЗапроса", РезультатЗапроса.Колонки);
	
	РекурсивноДобавитьРезультатыЗапросаВМассивСтруктур(Значение, РезультатЗапроса, 0, ДополнительныеПараметры);
	
	Возврат Значение;
КонецФункции

Функция РекурсивноДобавитьРезультатыЗапросаВМассивСтруктур(Значение, ВерхняяВыборка, ТекущаяИерархия, ДополнительныеПараметры) 
	#Если Сервер И НЕ Сервер Тогда
		Значение = Новый Массив;
		Запрос = Новый Запрос;
		ВерхняяВыборка = Запрос.Выполнить().Выбрать();
	#КонецЕсли
	
	Если ДополнительныеПараметры.КолонкиИерархии.Количество() <= ТекущаяИерархия Тогда
		Выборка = ВерхняяВыборка.Выбрать();
		Пока Выборка.Следующий() Цикл
			Структура = Новый Структура;
			Для Каждого Колонка Из ДополнительныеПараметры.КолонкиЗапроса Цикл
				Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);	
			КонецЦикла;
			Значение.Добавить(Структура);
		КонецЦикла;
	Иначе
		Выборка = ВерхняяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ДополнительныеПараметры.КолонкиИерархии[ТекущаяИерархия]);
		Пока Выборка.Следующий() Цикл
			Структура = Новый Структура;
			Для Каждого Колонка Из ДополнительныеПараметры.КолонкиЗапроса Цикл
				Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЦикла;
			Структура.Вставить("ПодчиненныеЭлементы", Новый Массив);
			РекурсивноДобавитьРезультатыЗапросаВМассивСтруктур(Структура.ПодчиненныеЭлементы, Выборка, ТекущаяИерархия + 1, ДополнительныеПараметры); 
			Значение.Добавить(Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

#КонецОбласти

#Область Служебно

Функция ПросмотретьВТ(ЗапросИлиМенеджерТаблиц) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		Запрос = Новый Запрос;		
	#КонецЕсли
	
	Если ТипЗнч(ЗапросИлиМенеджерТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		РабочийМенеджерВТ = ЗапросИлиМенеджерТаблиц;
	Иначе
		Запрос = ЗапросИлиМенеджерТаблиц;
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Или Запрос.МенеджерВременныхТаблиц.Таблицы.Количество() = 0 Тогда
			РабочийЗапрос = СкопироватьЗапросБезВТ(Запрос);
			РабочийЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			РабочийЗапрос.Выполнить();
		Иначе
			РабочийЗапрос = Запрос;
		КонецЕсли;
		РабочийМенеджерВТ = РабочийЗапрос.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Структура = Новый Структура;
	Для Каждого Таблица Из РабочийМенеджерВТ.Таблицы Цикл
		Структура.Вставить(Таблица.ПолноеИмя, Таблица.ПолучитьДанные().Выгрузить());
	КонецЦикла;
	
	Возврат Структура;
КонецФункции

Функция СкопироватьЗапросБезВТ(Запрос) 
	НовыйЗапрос = Новый Запрос;
	НовыйЗапрос.Текст = Запрос.Текст;
	Для Каждого Пара Из Запрос.Параметры Цикл
		НовыйЗапрос.УстановитьПараметр(Пара.Ключ, Пара.Значение);
	КонецЦикла;
	Возврат НовыйЗапрос;
КонецФункции

Функция ПодставитьПараметрыВЗапрос(Запрос, Параметры = Неопределено)
	Перем МенеджерТаблиц;
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	А1Э_Структуры.СкопироватьСвойства(Запрос.Параметры, Параметры);
	Если Параметры.Свойство("МенеджерВременныхТаблиц", МенеджерТаблиц) И ТипЗнч(МенеджерТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	КонецЕсли;
КонецФункции

#КонецОбласти 
