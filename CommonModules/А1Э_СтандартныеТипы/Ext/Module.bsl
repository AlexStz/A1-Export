
#Область ПриведениеКТипу 

Функция НаправлениеСортировкиПолучить(Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("НаправлениеСортировки") Тогда
		Возврат Идентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Нрег = Лев(НРЕГ(Идентификатор), 4);
		Если Нрег = "возр" Тогда
			Возврат НаправлениеСортировки.Возр;
		ИначеЕсли Нрег = "убыв" Тогда
			Возврат НаправлениеСортировки.Убыв;
		КонецЕсли;
	КонецЕсли;
	ВызватьИсключение "Не удалось сопоставить значение стандартного типа <НаправлениеСортировки> идентификатору " + Идентификатор;
КонецФункции

Функция ТипНабораДанныхСКДПолучить(Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Нрег = Нрег(Идентификатор);
		Если Нрег = "объект" Тогда
			Возврат Тип("НаборДанныхОбъектСхемыКомпоновкиДанных");
		ИначеЕсли Нрег = "запрос" Тогда
			Возврат Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
		ИначеЕсли Нрег = "объединение" Тогда
			Возврат Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных");
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Неверный идентификатор типа набора данных СКД!");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Тип") Тогда
		Если Идентификатор = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
			Или Идентификатор = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
			Или Идентификатор = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
			Тогда
			Возврат Идентификатор;
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Неверный идентификатор типа набора данных СКД!");
		КонецЕсли;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "ТипНабораДанныхСКДПолучить", Идентификатор, "Строка,Тип");
	КонецЕсли;
КонецФункции

Функция НастройкиКомпоновкиДанныхПолучить(КоллекцияНастроек) Экспорт
	Если ТипЗнч(КоллекцияНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек.Настройки;
	ИначеЕсли ТипЗнч(КоллекцияНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("КоллекцияНастроек", "А1Э_СтандартныеТипы.НастройкиКомпоновкиДанныхПолучить", КоллекцияНастроек, "КомпоновщикНастроекКомпоновкиДанных,НастройкиКомпоновкиДанных"); 
	КонецЕсли;
КонецФункции

Функция ПользовательскиеНастройкиКомпоновкиДанныхПолучить(КоллекцияНастроек) Экспорт
	Если ТипЗнч(КоллекцияНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(КоллекцияНастроек) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("КоллекцияНастроек", "А1Э_СтандартныеТипы.ПользовательскиеНастройкиКомпоновкиДанныхПолучить", КоллекцияНастроек, "КомпоновщикНастроекКомпоновкиДанных,ПользовательскиеНастройкиКомпоновкиДанных"); 
	КонецЕсли;	
КонецФункции

Функция ВидСравненияКомпоновкиДанныхПолучить(Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Возврат Идентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат ВидСравненияКомпоновкиДанных[Идентификатор];
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить", Идентификатор, "ВидСравненияКомпоновкиДанных,Строка");
	КонецЕсли;	
КонецФункции

Функция ОписаниеТиповПолучить(Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("ОписаниеТипов") Тогда
		Возврат Идентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Тип") Тогда
		МассивТипов = А1Э_Массивы.Создать(Идентификатор);
		Возврат Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Новый ОписаниеТипов(Идентификатор);
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.ОписаниеТиповПолучить", Идентификатор, "ОписаниеТипов,Тип,Строка");
	КонецЕсли;
КонецФункции

#Если НЕ Клиент Тогда
	
	Функция ОбъектМетаданныхПолучить(Идентификатор) Экспорт
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
			Возврат Идентификатор;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда	
			ОбъектМетаданных = Метаданные.Справочники.Найти(Идентификатор);
			Если ОбъектМетаданных <> Неопределено Тогда
				Возврат ОбъектМетаданных;
			КонецЕсли;
			ОбъектМетаданных = Метаданные.Документы.Найти(Идентификатор);
			Если ОбъектМетаданных <> Неопределено Тогда
				Возврат ОбъектМетаданных;
			КонецЕсли;
			А1Э_Служебный.СлужебноеИсключение("Объект " + Идентификатор + " не найден в списке справочников и документов!");
		Иначе
			А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.ОбъектМетаданныхПолучить()", Идентификатор, "ОбъектМетаданных,Строка");
		КонецЕсли;
	КонецФункции
	
	Функция ПустаяСсылкаПолучить(Идентификатор) Экспорт
		ОбъектМетаданных = ОбъектМетаданныхПолучить(Идентификатор);
		Возврат ПредопределенноеЗначение(ОбъектМетаданных.ПолноеИмя() +".ПустаяСсылка");
	КонецФункции 
	
#КонецЕсли
#КонецОбласти 

// Превращает строку в идентификатор для подстановки в структуры, имена колонок и т. д.
//
// Параметры:
//  Строка				 - Строка - строка, на основе которой будет создан идентификатор.
//  ЗначениеПоУмолчанию	 - Строка, Неопределено - если получившийся идентификатор пустой, то будет возвращено это значение. Если Неопределено, будет вызвано исключение.
// 
// Возвращаемое значение:
//  Идентификатор - Строка
//
Функция Идентификатор(Строка, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Идентификатор = "";
	Сч = 0;
	ПервыйСимвол = Истина;
	Пока Сч < СтрДлина(Строка) Цикл
		Сч = Сч + 1;
		Символ = Сред(Строка, Сч, 1);
		Нрег = Нрег(Символ);
		Если ПервыйСимвол Тогда
			СтрокаПоиска = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
		Иначе
			СтрокаПоиска = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя_0123456789";
		КонецЕсли;
		Если СтрНайти(СтрокаПоиска, Нрег) > 0 Тогда
			Идентификатор = Идентификатор + Символ;
			ПервыйСимвол = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПервыйСимвол Тогда
		Возврат Идентификатор;
	Иначе
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			ВызватьИсключение "Не удалось создать идентификатор для строки <" + Строка + ">";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ИдентификаторБезПовторений(Идентификатор, КоличестваИдентификаторов) Экспорт   
	#Если Сервер И НЕ Сервер Тогда
		КоличестваИдентификаторов = Новый Соответствие;		
	#КонецЕсли 
	КоличествоПовторений = ?(КоличестваИдентификаторов[Идентификатор] = Неопределено, 0, КоличестваИдентификаторов[Идентификатор]); 
	КоличестваИдентификаторов.Вставить(Идентификатор, КоличествоПовторений + 1);
	ИдентификаторБезПовторений = Идентификатор;
	Если КоличествоПовторений > 0 Тогда
		ИдентификаторБезПовторений = ИдентификаторБезПовторений + "_" + А1Э_Строки.ВСтроку(КоличествоПовторений);
	КонецЕсли;
	Возврат ИдентификаторБезПовторений;	
КонецФункции 

Функция ПустоеЗначение(Знач ОписаниеТипов) Экспорт
	ОписаниеТипов = ОписаниеТиповПолучить(ОписаниеТипов);
	МассивТипов = Новый Массив;
	Для Каждого Элемент Из ОписаниеТипов.Типы() Цикл
		Если Элемент <> Тип("Null") Тогда
			МассивТипов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Если МассивТипов.Количество() = 0 Тогда
		Возврат Null;
	ИначеЕсли МассивТипов.Количество() > 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПустоеЗначениеПоТипу(МассивТипов[0]);
	КонецЕсли;
		
КонецФункции

Функция Заполнено(Значение) Экспорт
	Типы = А1Э_Массивы.Создать(Тип("Строка"), Тип("Число"), Тип("Дата"), Тип("Булево"), Тип("Массив"), Тип("Структура"));
	Если Типы.Найти(ТипЗнч(Значение)) <> Неопределено Тогда
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;
	СтрокаТипа = НРЕГ(Строка(ТипЗнч(Значение)));
	МассивСтрок = А1Э_Строки.Разделить(СтрокаТипа, ".");
	Если МассивСтрок.Количество() > 1 Тогда
		Если СтрНайти(МассивСтрок[0], "cсылка") > 0 Тогда
			Возврат ЗначениеЗаполнено(Значение);
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

#Область Служебно

Функция ПустоеЗначениеПоТипу(Тип)
	Если Тип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли Тип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли Тип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли Тип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе  
		//СтрокаТипа = НРЕГ(Строка(Тип));
		//МассивСтрок = А1Э_Строки.Разделить(СтрокаТипа, ".");
		//Если МассивСтрок.Количество() > 1 Тогда
		//	Если СтрНайти(МассивСтрок[0], "cсылка") > 0 Тогда
				Возврат Новый(Тип);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти 