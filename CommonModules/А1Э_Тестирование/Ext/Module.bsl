#Если Клиент Тогда
	
	Функция ВыполнитьТесты(МассивОписаний) Экспорт
		ВыполнитьКлиентскиеТесты(МассивОписаний);
		А1Э_ОбщееСервер.РезультатФункции(ИмяМодуля() + ".ВыполнитьСерверныеТесты", МассивОписаний);
	КонецФункции
	
	Функция ВыполнитьКлиентскиеТесты(МассивОписаний) Экспорт
		Для Каждого ОписаниеТеста Из МассивОписаний Цикл
			Попытка
				Если ОписаниеТеста.Выполнен = Истина Тогда Продолжить; КонецЕсли;
				Если ОписаниеТеста.Имя = "ОткрытиеФормыНового" Тогда
					ПроверитьФорму(ОписаниеТеста.ИмяОбъектаМетаданных + ".ФормаОбъекта", , ОписаниеТеста);
				ИначеЕсли ОписаниеТеста.Имя = "ОткрытиеФормыСписка" Тогда
					ПроверитьФорму(ОписаниеТеста.ИмяОбъектаМетаданных + ".ФормаСписка", , ОписаниеТеста);
				ИначеЕсли ОписаниеТеста.Имя = "ОткрытиеФормыВыбора" Тогда
					ПроверитьФорму(ОписаниеТеста.ИмяОбъектаМетаданных + ".ФормаВыбора", , ОписаниеТеста);
				ИначеЕсли ОписаниеТеста.Имя = "ОткрытиеФормыСуществующего" Тогда
					ПроверитьФорму(ОписаниеТеста.ИмяОбъектаМетаданных + ".ФормаОбъекта", А1Э_Структуры.Создать(
					"Ключ", ОписаниеТеста.Ссылка,
					),
					ОписаниеТеста);
				КонецЕсли;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Сообщить("Что-то не так: " + ОписаниеОшибки);
			КонецПопытки;
			Сообщить("Пройден тест " + ОписаниеТеста.Имя + " " + ОписаниеТеста.ИмяОбъектаМетаданных);
		КонецЦикла;
		
	КонецФункции
	
	Функция ПроверитьФорму(ИмяФормы, Параметры, ОписаниеТеста)
		Попытка
			Форма = ПолучитьФорму(ИмяФормы, Параметры);
			Если Форма = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		Исключение
			УстановитьТестОшибка(ОписаниеТеста, "СозданиеФормы", ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		Попытка
			Форма.Открыть();
		Исключение
			УстановитьТестОшибка(ОписаниеТеста, "ОткрытиеФормы", ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		Попытка
			Форма.Закрыть();
		Исключение
			УстановитьТестОшибка(ОписаниеТеста, "ЗакрытиеФормы", ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		УстановитьТестПройден(ОписаниеТеста);
		Возврат Истина;
	КонецФункции 
#КонецЕсли

#Если НЕ Клиент Тогда
	
	Функция ПолучитьТесты(Контекст = Неопределено) Экспорт
		РабочийКонтекст = А1Э_Структуры.СкопироватьВШаблонСЗаменой(Контекст,
		"ОбъектыМетаданных", Неопределено,
		"СтандартныеИсключения", Истина,
		"КоличествоЭлементов", 1);

		Тесты = Новый Массив;
		
		Для Каждого Справочник Из Метаданные.Справочники Цикл
			ПолучитьТестыДляОбъектаМетаданных(Тесты, Справочник, РабочийКонтекст);
		КонецЦикла;
		Для Каждого Документ Из Метаданные.Документы Цикл
			ПолучитьТестыДляОбъектаМетаданных(Тесты, Документ, РабочийКонтекст);
		КонецЦикла;
		
		Возврат Тесты;
	КонецФункции 
	
	Функция ПолучитьТестыДляОбъектаМетаданных(Тесты, ОбъектМетаданных, Знач Контекст) Экспорт
		Если ТипЗнч(Контекст.ОбъектыМетаданных) = Тип("Массив") И Контекст.ОбъектыМетаданных.Найти(ОбъектМетаданных.ПолноеИмя()) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Контекст.СтандартныеИсключения Тогда
			Если СтрНайти(ОбъектМетаданных.Имя, "ПрисоединенныеФайлы") Тогда //Не будем тестировать одинаковые справочники присоединенных файлов.
				Возврат Неопределено;
			КонецЕсли;
			Если СтрНачинаетсяС(ОбъектМетаданных.Имя, "Удалить") Тогда //Не будем тестировать элементы, отмеченные к удалению.
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Чтение", ОбъектМетаданных) Тогда Возврат Неопределено; КонецЕсли;
		
		ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		
		Тесты.Добавить(НовыйОписаниеТеста(ИмяОбъектаМетаданных, "ОткрытиеФормыНового"));
		Тесты.Добавить(НовыйОписаниеТеста(ИмяОбъектаМетаданных, "ОткрытиеФормыСписка"));
		Тесты.Добавить(НовыйОписаниеТеста(ИмяОбъектаМетаданных, "ОткрытиеФормыВыбора"));
		
		ПоследниеЭлементы = ПоследниеЭлементы(ИмяОбъектаМетаданных, Контекст.КоличествоЭлементов);
		Для Каждого Ссылка Из ПоследниеЭлементы Цикл
			Тесты.Добавить(НовыйОписаниеТеста(ИмяОбъектаМетаданных, "ОткрытиеФормыСуществующего", Ссылка));
			Если ПравоДоступа("Изменение", ОбъектМетаданных) Тогда
				Тесты.Добавить(НовыйОписаниеТеста(ИмяОбъектаМетаданных, "Перезапись", Ссылка));
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	Функция ПоследниеЭлементы(ИмяОбъектаМетаданных, Количество) 
		Если Количество = 0 Тогда Возврат Новый Массив; КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Таблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.Дата УБЫВ");
		А1Э_Строки.Подставить(Запрос.Текст, "Документ.РеализацияТоваровУслуг", ИмяОбъектаМетаданных);
		А1Э_Строки.Подставить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + А1Э_Строки.ВСтроку(Количество));
		Если НЕ СтрНачинаетсяС(ИмяОбъектаМетаданных, "Документ") Тогда
			А1Э_Строки.Подставить(Запрос.Текст, "Таблица.Дата УБЫВ", "Таблица.Ссылка");
		КонецЕсли;
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецФункции 
	
	Функция ВыполнитьСерверныеТесты(МассивОписаний) Экспорт
		Для Каждого ОписаниеТеста Из МассивОписаний Цикл
			Если ОписаниеТеста.Выполнен = Истина Тогда Продолжить; КонецЕсли;
			
			Если ОписаниеТеста.Имя = "Перезапись" Тогда
				ПроверитьПерезапись(ОписаниеТеста);
			КонецЕсли;
		КонецЦикла;
	КонецФункции
	
	Функция ПроверитьПерезапись(ОписаниеТеста)
		НачатьТранзакцию();
		Попытка
			А1Э_Объекты.Изменить(ОписаниеТеста.Ссылка);
			УстановитьТестПройден(ОписаниеТеста);
			Результат = Истина;
		Исключение
			УстановитьТестОшибка(ОписаниеТеста, "ЗаписьОбъекта", ОписаниеОшибки());
			Результат = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
		Возврат Результат;
	КонецФункции 
#КонецЕсли

Функция НовыйОписаниеТеста(ИмяОбъектаМетаданных = Неопределено, Имя = Неопределено, Ссылка = Неопределено) Экспорт
	Возврат А1Э_Структуры.Создать(
	"Класс", "А1Э_ОписаниеТеста",
	"Имя", Имя,
	"ИмяОбъектаМетаданных", ИмяОбъектаМетаданных,
	"Представление", ,
	"Ссылка", Ссылка,
	"Выполнен", Ложь,
	"Ошибка", Ложь,
	"ТипОшибки", "",
	"ОписаниеОшибки", ,
	);	
КонецФункции

Функция УстановитьТестПройден(ОписаниеТеста)
	ОписаниеТеста.Выполнен = Истина;
	ОписаниеТеста.Ошибка = Ложь;
КонецФункции

Функция УстановитьТестОшибка(ОписаниеТеста, ТипОшибки, ОписаниеОшибки)
	ОписаниеТеста.Выполнен = Истина;
	ОписаниеТеста.Ошибка = Истина;
	ОписаниеТеста.ТипОшибки = ТипОшибки;
	ОписаниеТеста.ОписаниеОшибки = ОписаниеОшибки;
КонецФункции 

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_Тестирование";	
КонецФункции 